@use 'sass:color';
@use '~@rocket.chat/fuselage-tokens/colors.scss' as token-colors;

@function _check-grade($grade) {
  @if $grade % 100 != 0 or $grade / 100 <= 0 or $grade / 100 > 9 {
    @error 'invalid color grade';
  }

  @return $grade;
}

@function _get-color($prefix, $grade, $alpha) {
  @if $grade % 100 != 0 or $grade / 100 <= 0 or $grade / 100 > 9 {
    @error 'invalid color grade';
  }

  $base-color: map-get(token-colors.$colors, #{ $prefix }#{ $grade });

  @if $alpha != null {
    @return color.change($base-color, $alpha: $alpha);
  }

  @return $base-color;
}

@function _get-varname($prefix, $grade, $alpha) {
  @if $grade % 100 != 0 or $grade / 100 <= 0 or $grade / 100 > 9 {
    @error 'invalid color grade';
  }

  @if $alpha != null {
    @return --rcx-color-#{ $prefix }-#{ $grade }-#{ $alpha * 100 };
  }

  @return --rcx-color-#{ $prefix }-#{ $grade };
}

@function neutral($grade, $alpha: null) {
  @return var(_get-varname(neutral, $grade, $alpha), _get-color(n, $grade, $alpha));
}

@function primary($grade, $alpha: null) {
  @return var(_get-varname(primary, $grade, $alpha), _get-color(b, $grade, $alpha));
}

@function info($grade, $alpha: null) {
  @return var(_get-varname(info, $grade, $alpha), _get-color(b, $grade, $alpha));
}

@function success($grade, $alpha: null) {
  @return var(_get-varname(success, $grade, $alpha), _get-color(g, $grade, $alpha));
}

@function warning($grade, $alpha: null) {
  @return var(_get-varname(warning, $grade, $alpha), _get-color(y, $grade, $alpha));
}

@function danger($grade, $alpha: null) {
  @return var(_get-varname(danger, $grade, $alpha), _get-color(r, $grade, $alpha));
}

@function surface() {
  @return var(--rcx-color-surface, white);
}

@function foreground($type) {
  @if $type == 'default' {
    @return var(--rcx-color-foreground-default, map-get(token-colors.$colors, n800));
  }
  @else if $type == 'info' {
    @return var(--rcx-color-foreground-info, map-get(token-colors.$colors, n700));
  }
  @else if $type == 'hint' {
    @return var(--rcx-color-foreground-hint, map-get(token-colors.$colors, n600));
  }
  @else if $type == 'disabled' {
    @return var(--rcx-color-foreground-disabled, map-get(token-colors.$colors, n400));
  }
  @else if $type == 'alternative' {
    @return var(--rcx-color-foreground-alternative, white);
  }
  @else if $type == 'primary' {
    @return var(--rcx-color-foreground-primary, map-get(token-colors.$colors, b500));
  }
  @else if $type == 'success' {
    @return var(--rcx-color-foreground-success, map-get(token-colors.$colors, g500));
  }
  @else if $type == 'danger' {
    @return var(--rcx-color-foreground-danger, map-get(token-colors.$colors, r500));
  }
  @else if $type == 'warning' {
    @return var(--rcx-color-foreground-warning, map-get(token-colors.$colors, y700));
  }
  @else if $type == 'link' {
    @return var(--rcx-color-foreground-link, map-get(token-colors.$colors, b500));
  }
  @else if $type == 'visited-link' {
    @return var(--rcx-color-foreground-visited-link, map-get(token-colors.$colors, p500));
  }
  @else if $type == 'active-link' {
    @return var(--rcx-color-foreground-active-link, map-get(token-colors.$colors, r500));
  }

  @error 'invalid foreground type';
}
